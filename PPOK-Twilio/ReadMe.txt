
Startup
 1) Make a PPOk local database in SQL Server
 2) Run the Twilio Test project (a console application) 
 3) Option 1 ("CSV Import Test") will set up the DB with the dummy data necessary for the web project
 4) **** LUKE OR SOMEONE: HOW TO ADD THEM AS A USER *****
 5) Run the Twilio web project and log in with the user you created 
 6) Run instance of localtunnel to use Twilio features (see "localtunnel howto.doc" in base directory or simply run "localtunnel.bat")

Projects:
 1) PPOK-Twilio
 2) PPOK-Twilio.Domain
 3) PPOK-Twilio.Test

1) PPOK-Twilio
Web project. Set as startup to run the website.
Directories:
 * App_Start - holds config files
 * Auth - manages the user's session by filling the user data upon login and the serializer for forms authentication.
 * Content - third party browser libraries and some custom site styling
 * Controllers and Views
	* Base - controllers that inherit from this can use the Authorize tag to specify which roles can access a page.
	* Account - handles login, 2-factor authentication, and changing a password
	* PatientMCP - manage patient contact preferences
	* LandingPage - main page a pharmacist sees when they log in
	* FillPrescription - page to fill prescriptions
	* ManagePharmacist - view, create, update, delete pharmacists for a single pharmacy
	* Search - search for any event (incomplete)
	* SinglePharmacist - ***** TOM? MATT? WHOSE IS THIS, WHAT DOES IT DO DIFFERENTLY FROM ManagePharmacist OR SystemAdmin? ****
	* SystemAdmin - view, create, update, delete pharmacies (incomplete)
	* Template - view, update message templates for each message type
	* Twilio - prepare responses to Twilio requests, formatted as TwiML, or call the TwilioService directly
 * PageScripts - custom Javascript
 * Scripts - a mixture of custom Javascript and third-party Javascript libraries

2) PPOK-Twilio.Domain
Class Library project. Holds the Services and Models used in PPOK-Twilio.
Directories:
 * Models - holds ViewModels both for our site and for communicating with Twilio
 * Scripts - SQL script for dropping / creating the database tables
 * Service
	* Each class in /Types/ has a corresponding Service that inherits from CRUDService, which generates SQL queries
	* DatabaseService handles the execution of SQL queries generated by the CRUD services
	* EmailService handles sending an email
	* SendEmailService is a layer over EmailService that uses the values set in /Util/Config.cs
	* TwilioService handles sending voice and SMS messages
	* CommunicationsService is a layer over TwilioService and SendEmailService that handles sending any type of event depending on the recipient's contact preferences.
 * Types - models that map to a row in each database table
 * Util - configuration for the email service and string interpolation (what we use to change {Patient.FirstName} to Mary Sue)

3) PPOK-Twilio.Test
Test scripts. Run an instance of this to test various services in PPOK-Twilio.Domain
Files:
 * App_Data - contains test inputs
 * Program.cs - when run, allows the user to execute each test
 